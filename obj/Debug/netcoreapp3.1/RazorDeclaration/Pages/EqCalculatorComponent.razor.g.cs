#pragma checksum "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\Pages\EqCalculatorComponent.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "796c35ba03ab51aa1e006e4c71b9bd236a6478ca"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorClient.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\_Imports.razor"
using BlazorClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\_Imports.razor"
using BlazorClient.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\Pages\EqCalculatorComponent.razor"
using BlazorClient.Calculator;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\Pages\EqCalculatorComponent.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/eqcalccomponent")]
    public partial class EqCalculatorComponent : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 22 "C:\Users\bradh\source\repos\hbmCalculator\BlazorClient\Pages\EqCalculatorComponent.razor"
       

	private string _result, _previousResult, _equation, _errorMsg = string.Empty;

	private int _counter;

	private List<string> _results;

	public EquationCalculator Calculator { get; } = new EquationCalculator();

	private void Calculate()
	{
		_previousResult = string.Empty;
		Calculator.Equation = _equation;

		var calcResultString = Calculator.Calculate();

		if (calcResultString.StartsWith("Err"))
		{
			Calculator.CalculationResult = 0;

			Calculator.ErrorMessage = calcResultString;
			_results ??= new List<string>();

			_result = calcResultString;
			_results.Add(_result);
			_counter = _results.Count - 1;
			return;
		}

		var result = Calculator.CalculationResult;

		_result = result.ToString(CultureInfo.InvariantCulture);
		_results ??= new List<string>();
		_results.Add(_result);
		_counter = _results.Count - 1;

	}

	private void GetPrevious(int? index = null)
	{
		if (index != null)
		{
			if (!(_results.Count >= index)) return;

			if (index == 0)
			{
				_previousResult = _results[0];
				return;
			}
			var iterator = _results.Count - 10;
			if (index == iterator)
			{
				_previousResult = _results[iterator];
				return;
			}
			_previousResult = _results[(int)index - 1];
			_counter--;
		}
		else
		{
			_previousResult = _results[_counter - 1];
			if (_counter <= _results.Count - 10)
				_counter--;
		}
	}

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591

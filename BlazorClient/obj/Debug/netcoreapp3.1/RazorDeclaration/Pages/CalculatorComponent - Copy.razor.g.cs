#pragma checksum "C:\Users\bradh\source\repos\BlazorClient\Pages\CalculatorComponent - Copy.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5895713f4066f6c56f4dfa73b17cd215ccf866c0"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorClient.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\bradh\source\repos\BlazorClient\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\bradh\source\repos\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\bradh\source\repos\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\bradh\source\repos\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\bradh\source\repos\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\bradh\source\repos\BlazorClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\bradh\source\repos\BlazorClient\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\bradh\source\repos\BlazorClient\_Imports.razor"
using BlazorClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\bradh\source\repos\BlazorClient\_Imports.razor"
using BlazorClient.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\bradh\source\repos\BlazorClient\Pages\CalculatorComponent - Copy.razor"
using BlazorClient.Calculator;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/calccomponent")]
    public partial class CalculatorComponent___Copy : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 28 "C:\Users\bradh\source\repos\BlazorClient\Pages\CalculatorComponent - Copy.razor"
       

	private string _result;
	private string _previousResult;
	private int _counter = 0;
	private string _leftValue="";
	private string _rightValue="";
	private string _mathOperator = "+";
	private List<string> _results;
	private string _errorMsg="";

	readonly Calculator _calculator = new Calculator();

	private void Calculate()
	{
		if (!_rightValue.StartsWith("0") || _mathOperator != "/")
		{
			_errorMsg = "";
			if (_leftValue != string.Empty && _rightValue != string.Empty)
			{
				_errorMsg = "";
				_calculator.ErrorMessage = "";
				_calculator.SetLeft(_leftValue);
				_calculator.SetRight(_rightValue);
				_calculator.SetOperator(_mathOperator);
				_calculator.Calculate();

				if (!String.IsNullOrEmpty(_calculator.ErrorMessage))
				{
					_errorMsg = _calculator.ErrorMessage;
					_result = "";
					_leftValue = "";
					_rightValue = "";
				}

				_result = _calculator.GetResult();
				_results ??= new List<string>();
				_results.Add(_calculator.GetResult());
				_counter = _results.Count - 1;
				_previousResult = "";
			}
			else
			{
				if (_leftValue == string.Empty)
				{
					_errorMsg = "Uh oh! The left-side number is missing";
				}

				if (_rightValue == string.Empty)
					_errorMsg = "Uh oh! The right-side number is missing";
			}
		}
		else
		{
			_errorMsg = "Oops! There's no dividing by zero";
		}
	}

	private void GetPrevious(int? index = null)
	{
		if (index != null)
		{
			if (!(_results.Count >= index)) return;

			if (index == 0)
			{
				_previousResult = _results[0];
				return;
			}
			var iterator = _results.Count - 10;
			if (index == iterator)
			{
				_previousResult = _results[iterator];
				return;
			}
			_previousResult = _results[(int)index - 1];
			_counter--;
		}
		else
		{
			_previousResult = _results[_counter - 1];
			if (_counter <= _results.Count - 10)
				_counter--;
		}
	}

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591

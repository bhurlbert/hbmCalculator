@page "/eqcalccomponent"
@using BlazorClient.Calculator
@using System.Globalization
<h3>Calculator 1.2</h3>

<div>
	<input type="text" name="right" @bind="_equation" placeholder="Enter equation here" required class="col-6" /><br />
	<p style="color: grey;font-style: italic" class="text-sm-left">Enter the equation in the format &lt;number&gt;&lt;operator&gt;&lt;number2&gt;&lt;operator2&gt;...&lt;numberN&gt;&lt;operatorN&gt; starting and ending with digits</p><br />

	<div class="btn-group">
		<button class="btn btn-primary" @onclick="Calculate">Calculate</button>
		<button class="btn btn-primary" @onclick="()=>GetPrevious(_counter)">GetPrevious</button>
	</div>

	<input hidden name="counter" type="number" @bind="_counter" />

	<p style="margin:10px">Current Result: <span style="color: blue;background-color: yellow">@_result</span></p>
	<p style="margin:10px">Previous Result: @_previousResult</p>

	<div style="color: Red;">@_errorMsg </div>
</div>
@code {

	private string _result, _previousResult, _equation, _errorMsg = string.Empty;

	private int _counter;

	private List<string> _results;

	public EquationCalculator Calculator { get; } = new EquationCalculator();

	private void Calculate()
	{
		_previousResult = string.Empty;
		Calculator.Equation = _equation;

		var calcResultString = Calculator.Calculate();

		if (calcResultString.StartsWith("Err"))
		{
			Calculator.CalculationResult = 0;

			Calculator.ErrorMessage = calcResultString;
			_results ??= new List<string>();

			_result = calcResultString;
			_results.Add(_result);
			_counter = _results.Count - 1;
			return;
		}

		var result = Calculator.CalculationResult;

		_result = result.ToString(CultureInfo.InvariantCulture);
		_results ??= new List<string>();
		_results.Add(_result);
		_counter = _results.Count - 1;

	}

	private void GetPrevious(int? index = null)
	{
		if (index != null)
		{
			if (!(_results.Count >= index)) return;

			if (index == 0)
			{
				_previousResult = _results[0];
				return;
			}
			var iterator = _results.Count - 10;
			if (index == iterator)
			{
				_previousResult = _results[iterator];
				return;
			}
			_previousResult = _results[(int)index - 1];
			_counter--;
		}
		else
		{
			_previousResult = _results[_counter - 1];
			if (_counter <= _results.Count - 10)
				_counter--;
		}
	}
}

@page "/calccomponent"
@using BlazorClient.Calculator
<h3>Calculator 1.1</h3>

<div>
	<input type="number" name="left" @bind="_leftValue" placeholder="Enter a number" required />
	<select @bind="_mathOperator" name="mathoperator">
		<option>+</option>
		<option>-</option>
		<option>*</option>
		<option>/</option>
	</select>
	<input type="number" name="right" @bind="_rightValue" placeholder="Enter a number" required />
	<br />
	<br />
	<div class="btn-group">
		<button class="btn btn-primary" @onclick="Calculate">Calculate</button>
		<button class="btn btn-primary" @onclick="()=>GetPrevious(_counter)">GetPrevious</button>
	</div>

	<input hidden name="counter" type="number" @bind="_counter" />

	<p style="margin:10px">Current Result: <span style="color: blue;background-color: yellow">@_result</span></p>
	<p style="margin:10px">Previous Result: @_previousResult</p>

	<div style="color: Red;">@_errorMsg </div>
</div>
@code {

	private string _result;
	private string _previousResult;
	private int _counter = 0;
	private string _leftValue="";
	private string _rightValue="";
	private string _mathOperator = "+";
	private List<string> _results;
	private string _errorMsg="";

	readonly Calculator _calculator = new Calculator();

	private void Calculate()
	{
		if (!_rightValue.StartsWith("0") || _mathOperator != "/")
		{
			_errorMsg = "";
			if (_leftValue != string.Empty && _rightValue != string.Empty)
			{
				_errorMsg = "";
				_calculator.ErrorMessage = "";
				_calculator.SetLeft(_leftValue);
				_calculator.SetRight(_rightValue);
				_calculator.SetOperator(_mathOperator);
				_calculator.Calculate();

				if (!String.IsNullOrEmpty(_calculator.ErrorMessage))
				{
					_errorMsg = _calculator.ErrorMessage;
					_result = "";
					_leftValue = "";
					_rightValue = "";
				}

				_result = _calculator.GetResult();
				_results ??= new List<string>();
				_results.Add(_calculator.GetResult());
				_counter = _results.Count - 1;
				_previousResult = "";
			}
			else
			{
				if (_leftValue == string.Empty)
				{
					_errorMsg = "Uh oh! The left-side number is missing";
				}

				if (_rightValue == string.Empty)
					_errorMsg = "Uh oh! The right-side number is missing";
			}
		}
		else
		{
			_errorMsg = "Oops! There's no dividing by zero";
		}
	}

	private void GetPrevious(int? index = null)
	{
		if (index != null)
		{
			if (!(_results.Count >= index)) return;

			if (index == 0)
			{
				_previousResult = _results[0];
				return;
			}
			var iterator = _results.Count - 10;
			if (index == iterator)
			{
				_previousResult = _results[iterator];
				return;
			}
			_previousResult = _results[(int)index - 1];
			_counter--;
		}
		else
		{
			_previousResult = _results[_counter - 1];
			if (_counter <= _results.Count - 10)
				_counter--;
		}
	}
}
